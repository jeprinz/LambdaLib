This repository contains

1) An axiomatization of quotient types, in quotient.v. This is based on the one from Lean.
2) A definition of untyped lambda calculus terms and convertibility, in term.v, as well as
   terms quotiented up to convertibility, in qterm.v.
   There are a couple of axioms currently that say things like if x a = x b, then a = b, and also that
   x a != y b. I plan to prove these and not leave them as axioms.
   In lambdaSolve.v, I define a tactic which automatically solves lambda calculus equations.
3) In embeddingOneTypeLevel.v I use the lambda calculus to define a deeper shallow embedding
   of dependent type theory (with one type level), and prove its consistency with a logical preciate.
   The proof is based on https://www.seas.upenn.edu/~sweirich/papers/liu-mltt-consistency.pdf



As part of the notation system for the lambda calculus library, I am using code from
https://github.com/mit-plv/koika/blob/master/coq/IdentParsing.v
as described in https://people.csail.mit.edu/bthom/coqpl21.pdf